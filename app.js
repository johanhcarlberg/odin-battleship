(()=>{"use strict";var r={582:(r,t,e)=>{e.d(t,{Z:()=>i});var n=e(537),o=e.n(n),a=e(645),s=e.n(a)()(o());s.push([r.id,".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}","",{version:3,sources:["webpack://./src/gameboard/GameboardComponent.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf",sourcesContent:[".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}"],sourceRoot:""}]);const i=s},645:r=>{r.exports=function(r){var t=[];return t.toString=function(){return this.map((function(t){var e="",n=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),n&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=r(t),n&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(r,e,n,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<r.length;u++){var l=[].concat(r[u]);n&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:r=>{r.exports=function(r){var t=r[1],e=r[3];if(!e)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:r=>{var t=[];function e(r){for(var e=-1,n=0;n<t.length;n++)if(t[n].identifier===r){e=n;break}return e}function n(r,n){for(var a={},s=[],i=0;i<r.length;i++){var c=r[i],u=n.base?c[0]+n.base:c[0],l=a[u]||0,p="".concat(u," ").concat(l);a[u]=l+1;var d=e(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var h=o(f,n);n.byIndex=i,t.splice(i,0,{identifier:p,updater:h,references:1})}s.push(p)}return s}function o(r,t){var e=t.domAPI(t);return e.update(r),function(t){if(t){if(t.css===r.css&&t.media===r.media&&t.sourceMap===r.sourceMap&&t.supports===r.supports&&t.layer===r.layer)return;e.update(r=t)}else e.remove()}}r.exports=function(r,o){var a=n(r=r||[],o=o||{});return function(r){r=r||[];for(var s=0;s<a.length;s++){var i=e(a[s]);t[i].references--}for(var c=n(r,o),u=0;u<a.length;u++){var l=e(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:r=>{var t={};r.exports=function(r,e){var n=function(r){if(void 0===t[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}t[r]=e}return t[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}},216:r=>{r.exports=function(r){var t=document.createElement("style");return r.setAttributes(t,r.attributes),r.insert(t,r.options),t}},565:(r,t,e)=>{r.exports=function(r){var t=e.nc;t&&r.setAttribute("nonce",t)}},795:r=>{r.exports=function(r){var t=r.insertStyleElement(r);return{update:function(e){!function(r,t,e){var n="";e.supports&&(n+="@supports (".concat(e.supports,") {")),e.media&&(n+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(n+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),n+=e.css,o&&(n+="}"),e.media&&(n+="}"),e.supports&&(n+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,r,t.options)}(t,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(t)}}}},589:r=>{r.exports=function(r,t){if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}}},t={};function e(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return r[n](a,a.exports,e),a.exports}e.n=r=>{var t=r&&r.__esModule?()=>r.default:()=>r;return e.d(t,{a:t}),t},e.d=(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},e.o=(r,t)=>Object.prototype.hasOwnProperty.call(r,t),e.nc=void 0,(()=>{const r=(r=10)=>{const t=r,e=[],n=[];let o=new Array(t*t);const a=()=>o,s=(r,e)=>{const n=((r,e)=>t*e+r)(r,e);return n},i=(r,t)=>{const e=t.x,n=t.y,i=s(e,n);if(!c(r,t))throw new Error("Position already has ship");let u=((r=2)=>{let t=0,e=r;const n=()=>t>=e;return{getTimesHit:()=>t,getLength:()=>e,hit:()=>{n()||t++},isSunk:n}})(r),l=a();for(let r=0;r<u.getLength();r++)l[i+r]=u;return(r=>{o=r})(l),o},c=(r,e)=>{for(let n=0;n<r;n++){let r=e.x+n,o=e.y+n;if(r>t-1||o>t-1)return!1;let i=s(e.x+n,e.y);if(a()[i])return!1}return!0},u=r=>{let e=Math.floor(Math.random()*t),n=Math.floor(Math.random()*t);for(;!c(r,{x:e,y:n});)e=Math.floor(Math.random()*t),n=Math.floor(Math.random()*t);return{x:e,y:n}};return{getBoard:a,getPos:s,placeShip:i,receiveAttack:(r,t)=>{const a=[r,t];if((r=>{const t=JSON.stringify(r);return n.some((r=>JSON.stringify(r)===t))})(a)||(r=>{const t=JSON.stringify(r);return e.some((r=>JSON.stringify(r)===t))})(a))return;const i=o[s(r,t)];i&&i.hit?(n.push(a),i.hit()):e.push(a)},getMissedShots:()=>e,isAllSunk:()=>{for(const r of o)if(r&&r.isSunk&&!r.isSunk())return!1;return!0},getHits:()=>n,generateBoard:()=>{const r=[2,2,2,3,3,4],t=[];for(;r.length>0;){const e=r.shift(),n=u(e);i(e,n),t.push({x:n.x,y:n.y})}return t}}},{isArray:t}=Array;class n{constructor(r){this.value=r}}function o(r,e,o){if(!t(o))throw new TypeError("reduce: list must be array or iterable");let a=0;const s=o.length;for(;a<s;){if((e=r(e,o[a],a,o))instanceof n)return e.value;a++}return e}function a(r,t){return function(){return t.call(this,r.apply(this,arguments))}}!function r(t,e=[]){return(...n)=>{return(o=[...e,...n]).length>=t.length?t(...o):r(t,o);var o}}(o);const s=()=>({gameBoard:r()}),i=(r={})=>({...r,getNextAttack:()=>({x:Math.floor(Math.random()*Math.pow(10,2)),y:Math.floor(Math.random()*Math.pow(10,2)),isAI:!0})});var c=e(379),u=e.n(c),l=e(795),p=e.n(l),d=e(569),f=e.n(d),h=e(565),m=e.n(h),g=e(216),y=e.n(g),v=e(589),A=e.n(v),b=e(582),x={};x.styleTagTransform=A(),x.setAttributes=m(),x.insert=f().bind(null,"head"),x.domAPI=p(),x.insertStyleElement=y(),u()(b.Z,x),b.Z&&b.Z.locals&&b.Z.locals;class C{constructor(r){this.gameboard=r}render(){const r=document.createElement("div");r.classList.add("gameboard-container");const t=this.gameboard.getBoard();for(let e=0;e<this.gameboard.getBoard().length;e++){const n=document.createElement("div");n.classList.add("gameboard-item"),n.textContent=e,t[e]&&(n.classList.add("ship"),t[e].isSunk()&&n.classList.add("sunk")),r.appendChild(n)}return r}}const B=()=>{const r=s();console.log(r),r.gameBoard.generateBoard();const t=(()=>{const r=s();return function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return function(r,t){switch(r){case 0:return function(){return t.apply(this,arguments)};case 1:return function(r){return t.apply(this,arguments)};case 2:return function(r,e){return t.apply(this,arguments)};case 3:return function(r,e,n){return t.apply(this,arguments)};case 4:return function(r,e,n,o){return t.apply(this,arguments)};case 5:return function(r,e,n,o,a){return t.apply(this,arguments)};case 6:return function(r,e,n,o,a,s){return t.apply(this,arguments)};case 7:return function(r,e,n,o,a,s,i){return t.apply(this,arguments)};case 8:return function(r,e,n,o,a,s,i,c){return t.apply(this,arguments)};case 9:return function(r,e,n,o,a,s,i,c,u){return t.apply(this,arguments)};case 10:return function(r,e,n,o,a,s,i,c,u,l){return t.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}(arguments[0].length,o(a,arguments[0],Array.prototype.slice.call(arguments,1,1/0)))}(i)(r)})();return console.log(t),t.gameBoard.generateBoard(),{player1:r,player2:t,p1gameBoard:new C(r.gameBoard),p2gameBoard:new C(t.gameBoard)}};(()=>{console.log("battleship app loaded");const r=document.querySelector(".wrapper"),t=B();console.log(t),r.appendChild(t.p1gameBoard.render())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,