(()=>{"use strict";var r={780:(r,e,t)=>{t.d(e,{Z:()=>i});var n=t(537),o=t.n(n),a=t(645),s=t.n(a)()(o());s.push([r.id,".wrapper {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}","",{version:3,sources:["webpack://./src/app.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;AACzB",sourcesContent:[".wrapper {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}"],sourceRoot:""}]);const i=s},582:(r,e,t)=>{t.d(e,{Z:()=>i});var n=t(537),o=t.n(n),a=t(645),s=t.n(a)()(o());s.push([r.id,".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}","",{version:3,sources:["webpack://./src/gameboard/GameboardComponent.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf",sourcesContent:[".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}"],sourceRoot:""}]);const i=s},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<r.length;u++){var l=[].concat(r[u]);n&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:r=>{r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var a={},s=[],i=0;i<r.length;i++){var c=r[i],u=n.base?c[0]+n.base:c[0],l=a[u]||0,p="".concat(u," ").concat(l);a[u]=l+1;var d=t(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var h=o(f,n);n.byIndex=i,e.splice(i,0,{identifier:p,updater:h,references:1})}s.push(p)}return s}function o(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,o){var a=n(r=r||[],o=o||{});return function(r){r=r||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=n(r,o),u=0;u<a.length;u++){var l=t(a[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:r=>{var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function t(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={id:n,exports:{}};return r[n](a,a.exports,t),a.exports}t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),t.nc=void 0,(()=>{var r=t(379),e=t.n(r),n=t(795),o=t.n(n),a=t(569),s=t.n(a),i=t(565),c=t.n(i),u=t(216),l=t.n(u),p=t(589),d=t.n(p),f=t(780),h={};h.styleTagTransform=d(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),e()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const{isArray:m}=Array;class g{constructor(r){this.value=r}}function y(r,e,t){if(!m(t))throw new TypeError("reduce: list must be array or iterable");let n=0;const o=t.length;for(;n<o;){if((e=r(e,t[n],n,t))instanceof g)return e.value;n++}return e}function A(r,e){return function(){return e.call(this,r.apply(this,arguments))}}!function r(e,t=[]){return(...n)=>{return(o=[...t,...n]).length>=e.length?e(...o):r(e,o);var o}}(y);const v=()=>{let r=((r=10)=>{const e=r,t=[],n=[];let o=new Array(e*e);const a=()=>o,s=(r,t)=>{const n=((r,t)=>e*t+r)(r,t);return n},i=(r,e)=>{const t=e.x,n=e.y,i=s(t,n);if(!c(r,e))throw new Error("Position already has ship");let u=((r=2)=>{let e=0,t=r;const n=()=>e>=t;return{getTimesHit:()=>e,getLength:()=>t,hit:()=>{n()||e++},isSunk:n}})(r),l=a();for(let r=0;r<u.getLength();r++)l[i+r]=u;return(r=>{o=r})(l),o},c=(r,t)=>{for(let n=0;n<r;n++){let r=t.x+n,o=t.y+n;if(r>e-1||o>e-1)return!1;let i=s(t.x+n,t.y);if(a()[i])return!1}return!0},u=r=>{let t=Math.floor(Math.random()*e),n=Math.floor(Math.random()*e);for(;!c(r,{x:t,y:n});)t=Math.floor(Math.random()*e),n=Math.floor(Math.random()*e);return{x:t,y:n}};return{getBoard:a,getPos:s,placeShip:i,receiveAttack:(r,e)=>{const a=[r,e];if((r=>{const e=JSON.stringify(r);return n.some((r=>JSON.stringify(r)===e))})(a)||(r=>{const e=JSON.stringify(r);return t.some((r=>JSON.stringify(r)===e))})(a))return;const i=o[s(r,e)];i&&i.hit?(n.push(a),i.hit()):t.push(a)},getMissedShots:()=>t,isAllSunk:()=>{for(const r of o)if(r&&r.isSunk&&!r.isSunk())return!1;return!0},getHits:()=>n,generateBoard:()=>{const r=[2,2,2,3,3,4],e=[];for(;r.length>0;){const t=r.shift(),n=u(t);i(t,n),e.push({x:n.x,y:n.y})}return e}}})(),e=!1;const t=r=>e=r;return{gameBoard:r,getIsCurrentPlayer:()=>e,setIsCurrentPlayer:t,toggleIsCurrentPlayer:()=>t(!e)}},b=(r={})=>({...r,getNextAttack:()=>({x:Math.floor(Math.random()*Math.pow(10,2)),y:Math.floor(Math.random()*Math.pow(10,2)),isAI:!0})});var C=t(582),x={};x.styleTagTransform=d(),x.setAttributes=c(),x.insert=s().bind(null,"head"),x.domAPI=o(),x.insertStyleElement=l(),e()(C.Z,x),C.Z&&C.Z.locals&&C.Z.locals;class B{constructor(r,e=!1){this.player=r,this.gameboard=r.gameBoard,this.hideShips=e}render(){const r=document.createElement("div");r.classList.add("gameboard-container");const e=this.gameboard.getBoard();for(let t=0;t<this.gameboard.getBoard().length;t++){const n=document.createElement("div");n.classList.add("gameboard-item"),n.textContent=t,n.position=t,n.addEventListener("click",(r=>{const e=r.currentTarget.position;console.log("clicked "+e)})),e[t]&&!this.hideShips&&(n.classList.add("ship"),e[t].isSunk()&&n.classList.add("sunk")),r.appendChild(n)}return r}}const I=()=>{const r=v();r.gameBoard.generateBoard();const e=(()=>{const r=v();return function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return function(r,e){switch(r){case 0:return function(){return e.apply(this,arguments)};case 1:return function(r){return e.apply(this,arguments)};case 2:return function(r,t){return e.apply(this,arguments)};case 3:return function(r,t,n){return e.apply(this,arguments)};case 4:return function(r,t,n,o){return e.apply(this,arguments)};case 5:return function(r,t,n,o,a){return e.apply(this,arguments)};case 6:return function(r,t,n,o,a,s){return e.apply(this,arguments)};case 7:return function(r,t,n,o,a,s,i){return e.apply(this,arguments)};case 8:return function(r,t,n,o,a,s,i,c){return e.apply(this,arguments)};case 9:return function(r,t,n,o,a,s,i,c,u){return e.apply(this,arguments)};case 10:return function(r,t,n,o,a,s,i,c,u,l){return e.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}(arguments[0].length,y(A,arguments[0],Array.prototype.slice.call(arguments,1,1/0)))}(b)(r)})();return e.gameBoard.generateBoard(),{player1:r,player2:e,p1gameBoard:new B(r),p2gameBoard:new B(e,!0)}};(()=>{console.log("battleship app loaded");const r=document.querySelector(".wrapper"),e=I();console.log(e),r.appendChild(e.p1gameBoard.render()),r.appendChild(e.p2gameBoard.render())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,