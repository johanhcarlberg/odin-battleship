(()=>{"use strict";var r={780:(r,e,t)=>{t.d(e,{Z:()=>i});var n=t(537),a=t.n(n),o=t(645),s=t.n(o)()(a());s.push([r.id,".wrapper {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}","",{version:3,sources:["webpack://./src/app.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;AACzB",sourcesContent:[".wrapper {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}"],sourceRoot:""}]);const i=s},582:(r,e,t)=>{t.d(e,{Z:()=>i});var n=t(537),a=t.n(n),o=t(645),s=t.n(o)()(a());s.push([r.id,".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(125, 247, 125);\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(255, 91, 91);\r\n}","",{version:3,sources:["webpack://./src/gameboard/GameboardComponent.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(125, 247, 125);\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(255, 91, 91);\r\n}"],sourceRoot:""}]);const i=s},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,a,o){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(n)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var u=0;u<r.length;u++){var l=[].concat(r[u]);n&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:r=>{r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var o={},s=[],i=0;i<r.length;i++){var c=r[i],u=n.base?c[0]+n.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var p=t(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var m=a(h,n);n.byIndex=i,e.splice(i,0,{identifier:d,updater:m,references:1})}s.push(d)}return s}function a(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,a){var o=n(r=r||[],a=a||{});return function(r){r=r||[];for(var s=0;s<o.length;s++){var i=t(o[s]);e[i].references--}for(var c=n(r,a),u=0;u<o.length;u++){var l=t(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:r=>{var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,a&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function t(n){var a=e[n];if(void 0!==a)return a.exports;var o=e[n]={id:n,exports:{}};return r[n](o,o.exports,t),o.exports}t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),t.nc=void 0,(()=>{var r=t(379),e=t.n(r),n=t(795),a=t.n(n),o=t(569),s=t.n(o),i=t(565),c=t.n(i),u=t(216),l=t.n(u),d=t(589),p=t.n(d),h=t(780),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const{isArray:f}=Array;class g{constructor(r){this.value=r}}function A(r,e,t){if(!f(t))throw new TypeError("reduce: list must be array or iterable");let n=0;const a=t.length;for(;n<a;){if((e=r(e,t[n],n,t))instanceof g)return e.value;n++}return e}function y(r,e){return function(){return e.call(this,r.apply(this,arguments))}}!function r(e,t=[]){return(...n)=>{return(a=[...t,...n]).length>=e.length?e(...a):r(e,a);var a}}(A);const b=()=>{let r=((r=10)=>{const e=r,t=[],n=[],a=[];let o=new Array(e*e);const s=()=>o,i=(r,t)=>{const n=((r,t)=>e*t+r)(r,t);return n},c=r=>{const e=JSON.stringify(r);return n.some((r=>JSON.stringify(r)===e))},u=r=>{const e=JSON.stringify(r);return t.some((r=>JSON.stringify(r)===e))},l=(r,e)=>{const t=e.x,n=e.y,c=i(t,n);if(!d(r,e))throw new Error("Position already has ship");let u=((r=2)=>{let e=0,t=r;const n=()=>e>=t;return{getTimesHit:()=>e,getLength:()=>t,hit:()=>{n()||e++},isSunk:n}})(r);a.push(u);let l=s();for(let r=0;r<u.getLength();r++)l[c+r]=u;return(r=>{o=r})(l),u},d=(r,t)=>{for(let n=0;n<r;n++){let r=t.x+n,a=t.y+n;if(r>e-1||a>e-1)return!1;let o=i(t.x+n,t.y);if(s()[o])return!1}return!0},p=r=>{let t=Math.floor(Math.random()*e),n=Math.floor(Math.random()*e);for(;!d(r,{x:t,y:n});)t=Math.floor(Math.random()*e),n=Math.floor(Math.random()*e);return{x:t,y:n}};return{getBoard:s,getPos:i,placeShip:l,receiveAttack:(r,e)=>{const a=[r,e];if(c(a)||u(a))return;const s=o[i(r,e)];s&&s.hit?(n.push(a),s.hit()):t.push(a)},getMissedShots:()=>t,isAllSunk:()=>{for(const r of o)if(r&&r.isSunk&&!r.isSunk())return!1;return!0},getHits:()=>n,generateBoard:()=>{const r=[2,2,2,3,3,4],e=[];for(;r.length>0;){const t=r.shift(),n=p(t);l(t,n),e.push({x:n.x,y:n.y})}return e},getCoordsFromIndex:r=>[r%e,Math.floor(r/e)],getShips:()=>a,hitExists:c,missExists:u}})(),e=!1;const t=r=>e=r;return{gameBoard:r,getIsCurrentPlayer:()=>e,setIsCurrentPlayer:t,toggleIsCurrentPlayer:()=>t(!e)}},v=(r={})=>({...r,getNextAttack:()=>({x:Math.floor(Math.random()*Math.pow(10,2)),y:Math.floor(Math.random()*Math.pow(10,2)),isAI:!0})});var C=t(582),I={};I.styleTagTransform=p(),I.setAttributes=c(),I.insert=s().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=l(),e()(C.Z,I),C.Z&&C.Z.locals&&C.Z.locals;class x{constructor(r,e=!1,t){this.player=r,this.gameboard=r.gameBoard,this.hideShips=e,this.gameboardItemClickCallback=t}render(){this.gameboardDiv=document.createElement("div"),this.gameboardDiv.classList.add("gameboard-container");for(let r=0;r<this.gameboard.getBoard().length;r++){const e=document.createElement("div");e.classList.add("gameboard-item"),e.textContent=r,e.position=r,e.addEventListener("click",(r=>{this.gameboardItemClickCallback(r)})),this.gameboardDiv.appendChild(e)}return this.updateGameboardItems(),this.gameboardDiv}updateGameboardItems(){for(let r of this.gameboardDiv.childNodes){const e=r.position,t=this.gameboard.getBoard();t[e]?(this.hideShips||r.classList.add("ship"),t[e].isSunk()?(r.classList.remove("hit"),r.classList.add("sunk")):this.gameboard.hitExists(this.gameboard.getCoordsFromIndex(e))&&r.classList.add("hit")):this.gameboard.missExists(this.gameboard.getCoordsFromIndex(e))&&r.classList.add("miss")}}}class B{constructor(){this.player1=b(),this.player1.gameBoard.generateBoard(),this.player2=(()=>{const r=b();return function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return function(r,e){switch(r){case 0:return function(){return e.apply(this,arguments)};case 1:return function(r){return e.apply(this,arguments)};case 2:return function(r,t){return e.apply(this,arguments)};case 3:return function(r,t,n){return e.apply(this,arguments)};case 4:return function(r,t,n,a){return e.apply(this,arguments)};case 5:return function(r,t,n,a,o){return e.apply(this,arguments)};case 6:return function(r,t,n,a,o,s){return e.apply(this,arguments)};case 7:return function(r,t,n,a,o,s,i){return e.apply(this,arguments)};case 8:return function(r,t,n,a,o,s,i,c){return e.apply(this,arguments)};case 9:return function(r,t,n,a,o,s,i,c,u){return e.apply(this,arguments)};case 10:return function(r,t,n,a,o,s,i,c,u,l){return e.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}(arguments[0].length,A(y,arguments[0],Array.prototype.slice.call(arguments,1,1/0)))}(v)(r)})(),this.player2.gameBoard.generateBoard(),this.player1.setIsCurrentPlayer(!0),this.handleEnemyGameboardInput=r=>{const e=this.player2.gameBoard.getCoordsFromIndex(r.currentTarget.position);console.log(e),this.player1.getIsCurrentPlayer()&&(this.player2.gameBoard.receiveAttack(e[0],e[1]),this.player2gameBoard.updateGameboardItems())},this.player1gameBoard=new x(this.player1,!1),this.player2gameBoard=new x(this.player2,!0,this.handleEnemyGameboardInput)}}(()=>{console.log("battleship app loaded");const r=document.querySelector(".wrapper"),e=new B;r.appendChild(e.player1gameBoard.render()),r.appendChild(e.player2gameBoard.render())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUs0TSxTQUFTLEVBQU01TSxLQUFLNE4sMEJBQzVFLEVDbkJKLE1BQ0lHLFFBQVFDLElBQUkseUJBQ1osTUFBTUcsRUFBVXJLLFNBQVNDLGNBQWMsWUFFakNxSyxFQUFPLElBQUkxQixFQUNqQnlCLEVBQVE1SixZQUFZNkosRUFBS0YsaUJBQWlCbEMsVUFDMUNtQyxFQUFRNUosWUFBWTZKLEVBQUtILGlCQUFpQmpDLFNBQzdDLEVBUEQsRSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9hcHAuY3NzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQvR2FtZWJvYXJkQ29tcG9uZW50LmNzcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2FwcC5jc3M/YTY3MiIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvcmFtYmRhL3NyYy9faW50ZXJuYWxzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3JhbWJkYS9zcmMvcmVkdWNlLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9yYW1iZGEvc3JjL3BpcGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3JhbWJkYS9zcmMvY3VycnkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3BsYXllci9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NoaXAvc2hpcC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkL0dhbWVib2FyZENvbXBvbmVudC5jc3M/ZjlkZSIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkL0dhbWVib2FyZENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvR2FtZS5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLndyYXBwZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLHFCQUFxQjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIud3JhcHBlciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXHJcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZ2FtZWJvYXJkLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCA1MHB4KTtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDUwcHgpO1xcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZWJvYXJkLWl0ZW0ge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM3Nzc7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbi5zaGlwIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxufVxcclxcblxcclxcbi5taXNzIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2FhYTtcXHJcXG59XFxyXFxuXFxyXFxuLmhpdCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMjUsIDI0NywgMTI1KTtcXHJcXG59XFxyXFxuXFxyXFxuLnN1bmsge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCA5MSwgOTEpO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvZ2FtZWJvYXJkL0dhbWVib2FyZENvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2IsdUNBQXVDO0lBQ3ZDLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksb0NBQW9DO0FBQ3hDOztBQUVBO0lBQ0ksa0NBQWtDO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5nYW1lYm9hcmQtY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDUwcHgpO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgNTBweCk7XFxyXFxufVxcclxcblxcclxcbi5nYW1lYm9hcmQtaXRlbSB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzc3NztcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLnNoaXAge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLm1pc3Mge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhO1xcclxcbn1cXHJcXG5cXHJcXG4uaGl0IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEyNSwgMjQ3LCAxMjUpO1xcclxcbn1cXHJcXG5cXHJcXG4uc3VuayB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDkxLCA5MSk7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hcHAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGNvbnN0IHsgaXNBcnJheSB9ID0gQXJyYXlcbiIsImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuL19pbnRlcm5hbHMvaXNBcnJheS5qcydcbmltcG9ydCB7IGN1cnJ5IH0gZnJvbSAnLi9jdXJyeS5qcydcblxuY2xhc3MgUmVkdWNlU3RvcHBlcntcbiAgY29uc3RydWN0b3IodmFsdWUpe1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VGbihcbiAgcmVkdWNlciwgYWNjLCBsaXN0XG4pe1xuICBpZiAoIWlzQXJyYXkobGlzdCkpe1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZTogbGlzdCBtdXN0IGJlIGFycmF5IG9yIGl0ZXJhYmxlJylcbiAgfVxuICBsZXQgaW5kZXggPSAwXG4gIGNvbnN0IGxlbiA9IGxpc3QubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuKXtcbiAgICBhY2MgPSByZWR1Y2VyKFxuICAgICAgYWNjLCBsaXN0WyBpbmRleCBdLCBpbmRleCwgbGlzdFxuICAgIClcbiAgICBpZiAoYWNjIGluc3RhbmNlb2YgUmVkdWNlU3RvcHBlcil7XG4gICAgICByZXR1cm4gYWNjLnZhbHVlXG4gICAgfVxuICAgIGluZGV4KytcbiAgfVxuXG4gIHJldHVybiBhY2Ncbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZSA9IGN1cnJ5KHJlZHVjZUZuKVxuZXhwb3J0IGNvbnN0IHJlZHVjZVN0b3BwZXIgPSB2YWx1ZSA9PiBuZXcgUmVkdWNlU3RvcHBlcih2YWx1ZSlcbiIsImltcG9ydCB7IHJlZHVjZUZuIH0gZnJvbSAnLi9yZWR1Y2UuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBfYXJpdHkobiwgZm4pe1xuICBzd2l0Y2ggKG4pe1xuICBjYXNlIDA6XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gZnVuY3Rpb24gKGEwKXtcbiAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxuICBjYXNlIDI6XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEpe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgYTAsIGExLCBhMlxuICAgICl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgY2FzZSA0OlxuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICBhMCwgYTEsIGEyLCBhM1xuICAgICl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgY2FzZSA1OlxuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICBhMCwgYTEsIGEyLCBhMywgYTRcbiAgICApe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIGNhc2UgNjpcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgYTAsIGExLCBhMiwgYTMsIGE0LCBhNVxuICAgICl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgY2FzZSA3OlxuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNlxuICAgICl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgY2FzZSA4OlxuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTdcbiAgICApe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIGNhc2UgOTpcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOFxuICAgICl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbiAgY2FzZSAxMDpcbiAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3LCBhOCwgYTlcbiAgICApe1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICB9XG4gIGRlZmF1bHQ6XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCB0byBfYXJpdHkgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyIG5vIGdyZWF0ZXIgdGhhbiB0ZW4nKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcGlwZShmLCBnKXtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpe1xuICAgIHJldHVybiBnLmNhbGwodGhpcywgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCl7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BpcGUgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIGFyZ3VtZW50JylcbiAgfVxuXG4gIHJldHVybiBfYXJpdHkoYXJndW1lbnRzWyAwIF0ubGVuZ3RoLFxuICAgIHJlZHVjZUZuKFxuICAgICAgX3BpcGUsXG4gICAgICBhcmd1bWVudHNbIDAgXSxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgICBhcmd1bWVudHMsIDEsIEluZmluaXR5XG4gICAgICApXG4gICAgKSlcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdXJyeShmbiwgYXJncyA9IFtdKXtcbiAgcmV0dXJuICguLi5fYXJncykgPT5cbiAgICAocmVzdCA9PiByZXN0Lmxlbmd0aCA+PSBmbi5sZW5ndGggPyBmbiguLi5yZXN0KSA6IGN1cnJ5KGZuLCByZXN0KSkoW1xuICAgICAgLi4uYXJncyxcbiAgICAgIC4uLl9hcmdzLFxuICAgIF0pXG59XG4iLCJpbXBvcnQgeyBHYW1lYm9hcmRGYWN0b3J5IH0gZnJvbSBcIi4uL2dhbWVib2FyZC9nYW1lYm9hcmRcIjtcclxuaW1wb3J0IHsgcGlwZSB9IGZyb20gXCJyYW1iZGFcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBQbGF5ZXIgPSAoKSA9PiB7XHJcbiAgICBsZXQgZ2FtZUJvYXJkID0gR2FtZWJvYXJkRmFjdG9yeSgpO1xyXG4gICAgbGV0IGlzQ3VycmVudFBsYXllciA9IGZhbHNlO1xyXG4gICAgY29uc3QgZ2V0SXNDdXJyZW50UGxheWVyID0gKCkgPT4gaXNDdXJyZW50UGxheWVyO1xyXG4gICAgY29uc3Qgc2V0SXNDdXJyZW50UGxheWVyID0gKHN0YXR1cykgPT4gaXNDdXJyZW50UGxheWVyID0gc3RhdHVzO1xyXG4gICAgY29uc3QgdG9nZ2xlSXNDdXJyZW50UGxheWVyID0gKCkgPT4gc2V0SXNDdXJyZW50UGxheWVyKCFpc0N1cnJlbnRQbGF5ZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnYW1lQm9hcmQsXHJcbiAgICAgICAgZ2V0SXNDdXJyZW50UGxheWVyLFxyXG4gICAgICAgIHNldElzQ3VycmVudFBsYXllcixcclxuICAgICAgICB0b2dnbGVJc0N1cnJlbnRQbGF5ZXIsXHJcbiAgICB9O1xyXG59XHJcblxyXG5jb25zdCBpc0FJUGxheWVyID0gKHBsYXllciA9IHt9KSA9PiB7XHJcbiAgICBjb25zdCBnZXROZXh0QXR0YWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKE1hdGgucG93KDEwLCAyKSkpXHJcbiAgICAgICAgbGV0IHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoTWF0aC5wb3coMTAsIDIpKSlcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICBpc0FJOiB0cnVlLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnBsYXllcixcclxuICAgICAgICBnZXROZXh0QXR0YWNrXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBSVBsYXllciA9ICgpID0+IHtcclxuICAgIGNvbnN0IHBsYXllciA9IFBsYXllcigpO1xyXG4gICAgcmV0dXJuIHBpcGUoXHJcbiAgICBpc0FJUGxheWVyXHJcbiAgICApKHBsYXllcilcclxufVxyXG4iLCJpbXBvcnQgeyBTaGlwRmFjdG9yeSB9IGZyb20gXCIuLi9zaGlwL3NoaXBcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBHYW1lYm9hcmRGYWN0b3J5ID0gKGJvYXJkTGVuZ3RoID0gMTApID0+IHtcclxuICAgIGNvbnN0IGxlbmd0aCA9IGJvYXJkTGVuZ3RoO1xyXG4gICAgY29uc3QgbWlzc2VkU2hvdHMgPSBbXTtcclxuICAgIGNvbnN0IGhpdHMgPSBbXTtcclxuICAgIGNvbnN0IGdldE1pc3NlZFNob3RzID0gKCkgID0+IG1pc3NlZFNob3RzO1xyXG4gICAgY29uc3QgZ2V0SGl0cyA9ICgpID0+IGhpdHM7XHJcblxyXG4gICAgY29uc3Qgc2hpcHMgPSBbXTtcclxuXHJcbiAgICBjb25zdCBjcmVhdGVCb2FyZCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgdG90YWxMZW5ndGggPSBsZW5ndGggKiBsZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheSh0b3RhbExlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBsZXQgYm9hcmQgPSBjcmVhdGVCb2FyZCgpXHJcbiAgICBjb25zdCBnZXRCb2FyZCA9ICgpID0+IGJvYXJkO1xyXG4gICAgY29uc3QgX3NldEJvYXJkID0gKG5ld0JvYXJkKSA9PiBib2FyZCA9IG5ld0JvYXJkO1xyXG5cclxuICAgIGNvbnN0IF9nZXRJbmRleEZyb21Db29yZCA9ICh4LHkpID0+IHtcclxuICAgICAgICByZXR1cm4gKGxlbmd0aCAqIHkpICsgeFxyXG4gICAgfVxyXG4gICAgY29uc3QgZ2V0UG9zID0gKHgsIHkpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IF9nZXRJbmRleEZyb21Db29yZCh4LCB5KTtcclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgX3NldFBvcyA9ICh4LCB5LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBnZXRQb3MoeCwgeSk7XHJcbiAgICAgICAgaW5kZXggPSBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhpdEV4aXN0cyA9IChwb3MpID0+IHtcclxuICAgICAgICBjb25zdCBwb3NTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShwb3MpO1xyXG4gICAgICAgIGxldCBjb250YWluc0hpdHMgPSBoaXRzLnNvbWUoKGUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpID09PSBwb3NTdHJpbmc7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gY29udGFpbnNIaXRzO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1pc3NFeGlzdHMgPSAocG9zKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocG9zKTtcclxuICAgICAgICBsZXQgY29udGFpbnNNaXNzID0gbWlzc2VkU2hvdHMuc29tZSgoZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkgPT09IHBvc1N0cmluZztcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiBjb250YWluc01pc3M7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9ICh4LCB5KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zID0gW3gsIHldO1xyXG4gICAgICAgIGlmIChoaXRFeGlzdHMocG9zKSB8fCBtaXNzRXhpc3RzKHBvcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2hpcCA9IGJvYXJkW2dldFBvcyh4LHkpXTtcclxuICAgICAgICBpZiAoc2hpcCAmJiBzaGlwLmhpdCkge1xyXG4gICAgICAgICAgICBoaXRzLnB1c2gocG9zKTtcclxuICAgICAgICAgICAgc2hpcC5oaXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtaXNzZWRTaG90cy5wdXNoKHBvcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaXplLCBwb3MpID0+IHtcclxuICAgICAgICBjb25zdCB4ID0gcG9zLng7XHJcbiAgICAgICAgY29uc3QgeSA9IHBvcy55O1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBnZXRQb3MoeCwgeSk7XHJcbiAgICAgICAgaWYgKCFfaXNTaGlwUG9zaXRpb25WYWxpZChzaXplLCBwb3MpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9zaXRpb24gYWxyZWFkeSBoYXMgc2hpcCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2hpcCA9IFNoaXBGYWN0b3J5KHNpemUpO1xyXG4gICAgICAgIHNoaXBzLnB1c2goc2hpcCk7XHJcblxyXG4gICAgICAgIGxldCBuZXdCb2FyZCA9IGdldEJvYXJkKCk7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKykge1xyXG4gICAgICAgICAgICBuZXdCb2FyZFtzdGFydEluZGV4ICsgaV0gPSBzaGlwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX3NldEJvYXJkKG5ld0JvYXJkKTtcclxuICAgICAgICByZXR1cm4gc2hpcDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBfaXNTaGlwUG9zaXRpb25WYWxpZCA9IChzaXplLCBwb3MpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgeCA9IHBvcy54ICsgaTtcclxuICAgICAgICAgICAgbGV0IHkgPSBwb3MueSArIGk7XHJcbiAgICAgICAgICAgIGlmICh4ID4gbGVuZ3RoIC0gMSB8fCB5ID4gbGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBib2FyZEluZGV4ID0gZ2V0UG9zKHBvcy54ICsgaSwgcG9zLnkpO1xyXG4gICAgICAgICAgICBpZiAoZ2V0Qm9hcmQoKVtib2FyZEluZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGlzQWxsU3VuayA9ICgpID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHBvcyBvZiBib2FyZCkge1xyXG4gICAgICAgICAgICBpZihwb3MgJiYgcG9zLmlzU3Vuaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwb3MuaXNTdW5rKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ2VuZXJhdGVCb2FyZCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBzaGlwc1RvQ3JlYXRlID0gWzIsIDIsIDIsIDMsIDMsIDRdO1xyXG4gICAgICAgIGNvbnN0IHNoaXBzQ3JlYXRlZCA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChzaGlwc1RvQ3JlYXRlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3U2hpcFNpemUgPSBzaGlwc1RvQ3JlYXRlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1NoaXBQb3MgPSBfZ2V0VmFsaWRSYW5kb21TaGlwUG9zaXRpb24obmV3U2hpcFNpemUpO1xyXG4gICAgICAgICAgICBwbGFjZVNoaXAobmV3U2hpcFNpemUsIG5ld1NoaXBQb3MpO1xyXG4gICAgICAgICAgICBzaGlwc0NyZWF0ZWQucHVzaCh7eDogbmV3U2hpcFBvcy54LCB5OiBuZXdTaGlwUG9zLnl9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNoaXBzQ3JlYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBfZ2V0VmFsaWRSYW5kb21TaGlwUG9zaXRpb24gPSAoc2l6ZSkgPT4ge1xyXG4gICAgICAgIGxldCB4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIGxlbmd0aCkpO1xyXG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKTtcclxuICAgICAgICB3aGlsZSghX2lzU2hpcFBvc2l0aW9uVmFsaWQoc2l6ZSwge3gsIHl9KSkge1xyXG4gICAgICAgICAgICB4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIGxlbmd0aCkpO1xyXG4gICAgICAgICAgICB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHt4LCB5fTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXRDb29yZHNGcm9tSW5kZXggPSAoaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCB4ID0gaW5kZXggJSBsZW5ndGg7XHJcbiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoaW5kZXggLyBsZW5ndGgpO1xyXG5cclxuICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdldFNoaXBzID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzaGlwcztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEJvYXJkLFxyXG4gICAgICAgIGdldFBvcyxcclxuICAgICAgICBwbGFjZVNoaXAsXHJcbiAgICAgICAgcmVjZWl2ZUF0dGFjayxcclxuICAgICAgICBnZXRNaXNzZWRTaG90cyxcclxuICAgICAgICBpc0FsbFN1bmssXHJcbiAgICAgICAgZ2V0SGl0cyxcclxuICAgICAgICBnZW5lcmF0ZUJvYXJkLFxyXG4gICAgICAgIGdldENvb3Jkc0Zyb21JbmRleCxcclxuICAgICAgICBnZXRTaGlwcyxcclxuICAgICAgICBoaXRFeGlzdHMsXHJcbiAgICAgICAgbWlzc0V4aXN0cyxcclxuICAgIH1cclxufSIsImV4cG9ydCBjb25zdCBTaGlwRmFjdG9yeSA9IChzaGlwTGVuZ3RoID0gMikgPT4ge1xyXG4gICAgbGV0IHRpbWVzSGl0ID0gMDtcclxuICAgIGNvbnN0IGdldFRpbWVzSGl0ID0gKCkgPT4gdGltZXNIaXQ7XHJcblxyXG4gICAgbGV0IGxlbmd0aCA9IHNoaXBMZW5ndGg7XHJcbiAgICBjb25zdCBnZXRMZW5ndGggPSAoKSA9PiBsZW5ndGg7XHJcblxyXG4gICAgY29uc3QgaGl0ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChpc1N1bmsoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRpbWVzSGl0Kys7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aW1lc0hpdCA+PSBsZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRUaW1lc0hpdCxcclxuICAgICAgICBnZXRMZW5ndGgsXHJcbiAgICAgICAgaGl0LFxyXG4gICAgICAgIGlzU3VuayxcclxuICAgIH1cclxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9HYW1lYm9hcmRDb21wb25lbnQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9HYW1lYm9hcmRDb21wb25lbnQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICcuL0dhbWVib2FyZENvbXBvbmVudC5jc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVib2FyZENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwbGF5ZXIsIGhpZGVTaGlwcyA9IGZhbHNlLCBnYW1lYm9hcmRJdGVtQ2xpY2tDYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xyXG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkID0gcGxheWVyLmdhbWVCb2FyZDtcclxuICAgICAgICB0aGlzLmhpZGVTaGlwcyA9IGhpZGVTaGlwcztcclxuICAgICAgICB0aGlzLmdhbWVib2FyZEl0ZW1DbGlja0NhbGxiYWNrID0gZ2FtZWJvYXJkSXRlbUNsaWNrQ2FsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5nYW1lYm9hcmREaXYuY2xhc3NMaXN0LmFkZCgnZ2FtZWJvYXJkLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nYW1lYm9hcmQuZ2V0Qm9hcmQoKS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBnYW1lYm9hcmRJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGdhbWVib2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgnZ2FtZWJvYXJkLWl0ZW0nKTtcclxuICAgICAgICAgICAgZ2FtZWJvYXJkSXRlbS50ZXh0Q29udGVudCA9IGk7XHJcbiAgICAgICAgICAgIGdhbWVib2FyZEl0ZW0ucG9zaXRpb24gPSBpO1xyXG5cclxuICAgICAgICAgICAgZ2FtZWJvYXJkSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVib2FyZEl0ZW1DbGlja0NhbGxiYWNrKGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5nYW1lYm9hcmREaXYuYXBwZW5kQ2hpbGQoZ2FtZWJvYXJkSXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlR2FtZWJvYXJkSXRlbXMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nYW1lYm9hcmREaXY7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHVwZGF0ZUdhbWVib2FyZEl0ZW1zKCkge1xyXG4gICAgICAgIGZvciAobGV0IGdhbWVib2FyZEl0ZW0gb2YgdGhpcy5nYW1lYm9hcmREaXYuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGdhbWVib2FyZEl0ZW0ucG9zaXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGJvYXJkID0gdGhpcy5nYW1lYm9hcmQuZ2V0Qm9hcmQoKTtcclxuICAgICAgICAgICAgaWYgKGJvYXJkW2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhpZGVTaGlwcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgnc2hpcCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChib2FyZFtpbmRleF0uaXNTdW5rKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmRJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZEl0ZW0uY2xhc3NMaXN0LmFkZCgnc3VuaycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWVib2FyZC5oaXRFeGlzdHModGhpcy5nYW1lYm9hcmQuZ2V0Q29vcmRzRnJvbUluZGV4KGluZGV4KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmRJdGVtLmNsYXNzTGlzdC5hZGQoJ2hpdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZWJvYXJkLm1pc3NFeGlzdHModGhpcy5nYW1lYm9hcmQuZ2V0Q29vcmRzRnJvbUluZGV4KGluZGV4KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmRJdGVtLmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IFBsYXllciwgQUlQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXIvcGxheWVyXCI7XHJcbmltcG9ydCB7IEdhbWVib2FyZENvbXBvbmVudCB9IGZyb20gXCIuL2dhbWVib2FyZC9HYW1lYm9hcmRDb21wb25lbnRcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnBsYXllcjEgPSBQbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnBsYXllcjEuZ2FtZUJvYXJkLmdlbmVyYXRlQm9hcmQoKTtcclxuICAgICAgICB0aGlzLnBsYXllcjIgPSBBSVBsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheWVyMi5nYW1lQm9hcmQuZ2VuZXJhdGVCb2FyZCgpO1xyXG4gICAgICAgIHRoaXMucGxheWVyMS5zZXRJc0N1cnJlbnRQbGF5ZXIodHJ1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlRW5lbXlHYW1lYm9hcmRJbnB1dCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMucGxheWVyMi5nYW1lQm9hcmQuZ2V0Q29vcmRzRnJvbUluZGV4KGUuY3VycmVudFRhcmdldC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvb3Jkcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXllcjEuZ2V0SXNDdXJyZW50UGxheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyMi5nYW1lQm9hcmQucmVjZWl2ZUF0dGFjayhjb29yZHNbMF0sY29vcmRzWzFdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyMmdhbWVCb2FyZC51cGRhdGVHYW1lYm9hcmRJdGVtcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBsYXllcjFnYW1lQm9hcmQgPSBuZXcgR2FtZWJvYXJkQ29tcG9uZW50KHRoaXMucGxheWVyMSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucGxheWVyMmdhbWVCb2FyZCA9IG5ldyBHYW1lYm9hcmRDb21wb25lbnQodGhpcy5wbGF5ZXIyLCB0cnVlLCB0aGlzLmhhbmRsZUVuZW15R2FtZWJvYXJkSW5wdXQpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICcuL2FwcC5jc3MnO1xyXG5cclxuaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuL0dhbWVcIjtcclxuXHJcbigoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnYmF0dGxlc2hpcCBhcHAgbG9hZGVkJyk7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndyYXBwZXInKTtcclxuICAgIFxyXG4gICAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XHJcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGdhbWUucGxheWVyMWdhbWVCb2FyZC5yZW5kZXIoKSk7XHJcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGdhbWUucGxheWVyMmdhbWVCb2FyZC5yZW5kZXIoKSk7XHJcbn0pKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImlzQXJyYXkiLCJBcnJheSIsIlJlZHVjZVN0b3BwZXIiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwicmVkdWNlRm4iLCJyZWR1Y2VyIiwiYWNjIiwiVHlwZUVycm9yIiwibGVuIiwiX3BpcGUiLCJmIiwiZyIsImFyZ3VtZW50cyIsImN1cnJ5IiwiZm4iLCJhcmdzIiwiX2FyZ3MiLCJyZXN0IiwiUGxheWVyIiwiZ2FtZUJvYXJkIiwiYm9hcmRMZW5ndGgiLCJtaXNzZWRTaG90cyIsImhpdHMiLCJzaGlwcyIsImJvYXJkIiwiZ2V0Qm9hcmQiLCJnZXRQb3MiLCJ4IiwieSIsIl9nZXRJbmRleEZyb21Db29yZCIsImhpdEV4aXN0cyIsInBvcyIsInBvc1N0cmluZyIsInNvbWUiLCJtaXNzRXhpc3RzIiwicGxhY2VTaGlwIiwic2l6ZSIsInN0YXJ0SW5kZXgiLCJfaXNTaGlwUG9zaXRpb25WYWxpZCIsInNoaXAiLCJzaGlwTGVuZ3RoIiwidGltZXNIaXQiLCJpc1N1bmsiLCJnZXRUaW1lc0hpdCIsImdldExlbmd0aCIsImhpdCIsIlNoaXBGYWN0b3J5IiwibmV3Qm9hcmQiLCJfc2V0Qm9hcmQiLCJib2FyZEluZGV4IiwiX2dldFZhbGlkUmFuZG9tU2hpcFBvc2l0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmVjZWl2ZUF0dGFjayIsImdldE1pc3NlZFNob3RzIiwiaXNBbGxTdW5rIiwiZ2V0SGl0cyIsImdlbmVyYXRlQm9hcmQiLCJzaGlwc1RvQ3JlYXRlIiwic2hpcHNDcmVhdGVkIiwibmV3U2hpcFNpemUiLCJzaGlmdCIsIm5ld1NoaXBQb3MiLCJnZXRDb29yZHNGcm9tSW5kZXgiLCJnZXRTaGlwcyIsIkdhbWVib2FyZEZhY3RvcnkiLCJpc0N1cnJlbnRQbGF5ZXIiLCJzZXRJc0N1cnJlbnRQbGF5ZXIiLCJzdGF0dXMiLCJnZXRJc0N1cnJlbnRQbGF5ZXIiLCJ0b2dnbGVJc0N1cnJlbnRQbGF5ZXIiLCJpc0FJUGxheWVyIiwicGxheWVyIiwiZ2V0TmV4dEF0dGFjayIsInBvdyIsImlzQUkiLCJoaWRlU2hpcHMiLCJnYW1lYm9hcmRJdGVtQ2xpY2tDYWxsYmFjayIsImdhbWVib2FyZCIsInJlbmRlciIsImdhbWVib2FyZERpdiIsImNsYXNzTGlzdCIsImFkZCIsImdhbWVib2FyZEl0ZW0iLCJ0ZXh0Q29udGVudCIsInBvc2l0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUdhbWVib2FyZEl0ZW1zIiwiY2hpbGROb2RlcyIsIkdhbWUiLCJwbGF5ZXIxIiwicGxheWVyMiIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiX2FyaXR5Iiwic2xpY2UiLCJJbmZpbml0eSIsInBpcGUiLCJBSVBsYXllciIsImhhbmRsZUVuZW15R2FtZWJvYXJkSW5wdXQiLCJjb29yZHMiLCJjdXJyZW50VGFyZ2V0IiwiY29uc29sZSIsImxvZyIsInBsYXllcjJnYW1lQm9hcmQiLCJwbGF5ZXIxZ2FtZUJvYXJkIiwid3JhcHBlciIsImdhbWUiXSwic291cmNlUm9vdCI6IiJ9