(()=>{var e={232:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([e.id,".game-over-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.game-over {\r\n    width: 40%;\r\n    height: 30%;\r\n    display: grid;\r\n    background-color: #fafafa;\r\n    border-radius: 10px;\r\n}\r\n\r\n.game-over-header {\r\n    justify-self: center;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.game-over-text {\r\n    font-size: 18px;\r\n    justify-self: center;\r\n}\r\n\r\n.new-game-button {\r\n    justify-self: center;\r\n    align-self: end;\r\n    margin-bottom: 1rem;\r\n    padding: 10px 30px;\r\n    outline: none;\r\n    background-color: #1b98ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    border: none;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n}\r\n\r\n.new-game-button:hover {\r\n    background-color: #55b1fc;\r\n}","",{version:3,sources:["webpack://./src/Game/GameOverComponent.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,aAAa;IACb,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,yBAAyB;IACzB,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:[".game-over-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.game-over {\r\n    width: 40%;\r\n    height: 30%;\r\n    display: grid;\r\n    background-color: #fafafa;\r\n    border-radius: 10px;\r\n}\r\n\r\n.game-over-header {\r\n    justify-self: center;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.game-over-text {\r\n    font-size: 18px;\r\n    justify-self: center;\r\n}\r\n\r\n.new-game-button {\r\n    justify-self: center;\r\n    align-self: end;\r\n    margin-bottom: 1rem;\r\n    padding: 10px 30px;\r\n    outline: none;\r\n    background-color: #1b98ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    border: none;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n}\r\n\r\n.new-game-button:hover {\r\n    background-color: #55b1fc;\r\n}"],sourceRoot:""}]);const s=i},780:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n.wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}\r\n\r\n.main-header {\r\n    grid-column: 1 / span 2;\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.player-header {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin: 1rem 0 0.5rem 0;\r\n}","",{version:3,sources:["webpack://./src/app.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;IACX,yCAAyC;AAC7C;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;AACzB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,uBAAuB;AAC3B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n    font-family: Helvetica, Arial, sans-serif;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n.wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}\r\n\r\n.main-header {\r\n    grid-column: 1 / span 2;\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.player-header {\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin: 1rem 0 0.5rem 0;\r\n}"],sourceRoot:""}]);const s=i},582:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([e.id,".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n    cursor: default;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n    cursor: default;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(255, 91, 91);\r\n    cursor: default;\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(99, 0, 0);\r\n    cursor: default;\r\n}","",{version:3,sources:["webpack://./src/gameboard/GameboardComponent.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,kCAAkC;IAClC,eAAe;AACnB;;AAEA;IACI,+BAA+B;IAC/B,eAAe;AACnB",sourcesContent:[".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n    cursor: default;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n    cursor: default;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(255, 91, 91);\r\n    cursor: default;\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(99, 0, 0);\r\n    cursor: default;\r\n}"],sourceRoot:""}]);const s=i},548:(e,r,n)=>{"use strict";n.d(r,{Z:()=>s});var t=n(537),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([e.id,".ship-placement-container {\r\n    border: 1px solid #333;\r\n    display: grid;\r\n    justify-self: center;\r\n    margin-top: 2rem;\r\n    grid-template-columns: 1fr 1fr;\r\n}\r\n\r\n.ship-to-place {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-columns: auto;\r\n    justify-items: center;\r\n    justify-content: start;\r\n    margin: 10px 30px;\r\n}\r\n\r\n.ship-to-place-cell {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #333;\r\n    color: #fff;\r\n    cursor: pointer;\r\n}\r\n\r\n.ship-placement-header {\r\n    grid-column: 1 / 3;\r\n    justify-self: center;\r\n    margin: 1rem 0;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/gameboard/ShipPlacementComponent.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,aAAa;IACb,oBAAoB;IACpB,gBAAgB;IAChB,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,qBAAqB;IACrB,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,cAAc;IACd,eAAe;IACf,iBAAiB;AACrB",sourcesContent:[".ship-placement-container {\r\n    border: 1px solid #333;\r\n    display: grid;\r\n    justify-self: center;\r\n    margin-top: 2rem;\r\n    grid-template-columns: 1fr 1fr;\r\n}\r\n\r\n.ship-to-place {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-columns: auto;\r\n    justify-items: center;\r\n    justify-content: start;\r\n    margin: 10px 30px;\r\n}\r\n\r\n.ship-to-place-cell {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #333;\r\n    color: #fff;\r\n    cursor: pointer;\r\n}\r\n\r\n.ship-placement-header {\r\n    grid-column: 1 / 3;\r\n    justify-self: center;\r\n    margin: 1rem 0;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n}\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),r.push(d))}},r}},537:e=>{"use strict";e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[r].concat([o]).join("\n")}return[r].join("\n")}},798:function(e,r,n){e=n.nmd(e),function(n,t){"use strict";var a={};n.PubSub?(a=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=a,function(e){var r={},n=-1,t="*";function a(e,r,n){try{e(r,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function o(e,r,n){e(r,n)}function i(e,n,t,i){var s,l=r[n],c=i?o:a;if(Object.prototype.hasOwnProperty.call(r,n))for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&c(l[s],e,t)}function s(e){var n=String(e);return Boolean(Object.prototype.hasOwnProperty.call(r,n)&&function(e){var r;for(r in e)if(Object.prototype.hasOwnProperty.call(e,r))return!0;return!1}(r[n]))}function l(e,r,n,a){var o=function(e,r,n){return function(){var a=String(e),o=a.lastIndexOf(".");for(i(e,e,r,n);-1!==o;)o=(a=a.substr(0,o)).lastIndexOf("."),i(e,a,r,n);i(e,t,r,n)}}(e="symbol"==typeof e?e.toString():e,r,a);return!!function(e){for(var r=String(e),n=s(r)||s(t),a=r.lastIndexOf(".");!n&&-1!==a;)a=(r=r.substr(0,a)).lastIndexOf("."),n=s(r);return n}(e)&&(!0===n?o():setTimeout(o,0),!0)}e.publish=function(r,n){return l(r,n,!1,e.immediateExceptions)},e.publishSync=function(r,n){return l(r,n,!0,e.immediateExceptions)},e.subscribe=function(e,t){if("function"!=typeof t)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(r,e)||(r[e]={});var a="uid_"+String(++n);return r[e][a]=t,a},e.subscribeAll=function(r){return e.subscribe(t,r)},e.subscribeOnce=function(r,n){var t=e.subscribe(r,(function(){e.unsubscribe(t),n.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){r={}},e.clearSubscriptions=function(e){var n;for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&0===n.indexOf(e)&&delete r[n]},e.countSubscriptions=function(e){var n,t,a=0;for(n in r)if(Object.prototype.hasOwnProperty.call(r,n)&&0===n.indexOf(e)){for(t in r[n])a++;break}return a},e.getSubscriptions=function(e){var n,t=[];for(n in r)Object.prototype.hasOwnProperty.call(r,n)&&0===n.indexOf(e)&&t.push(n);return t},e.unsubscribe=function(n){var t,a,o,i="string"==typeof n&&(Object.prototype.hasOwnProperty.call(r,n)||function(e){var n;for(n in r)if(Object.prototype.hasOwnProperty.call(r,n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!i&&"string"==typeof n,l="function"==typeof n,c=!1;if(!i){for(t in r)if(Object.prototype.hasOwnProperty.call(r,t)){if(a=r[t],s&&a[n]){delete a[n],c=n;break}if(l)for(o in a)Object.prototype.hasOwnProperty.call(a,o)&&a[o]===n&&(delete a[o],c=!0)}return c}e.clearSubscriptions(n)}}(a)),void 0!==e&&e.exports&&(r=e.exports=a),r.PubSub=a,e.exports=r=a}("object"==typeof window&&window||this)},379:e=>{"use strict";var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],c=t.base?l[0]+t.base:l[0],d=o[c]||0,p="".concat(c," ").concat(d);o[c]=d+1;var u=n(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)r[u].references++,r[u].updater(A);else{var m=a(A,t);t.byIndex=s,r.splice(s,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function a(e,r){var n=r.domAPI(r);return n.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,a){var o=t(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);r[s].references--}for(var l=t(e,a),c=0;c<o.length;c++){var d=n(o[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}o=l}}},569:e=>{"use strict";var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,n)=>{"use strict";e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},795:e=>{"use strict";e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,a&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{"use strict";e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},r={};function n(t){var a=r[t];if(void 0!==a)return a.exports;var o=r[t]={id:t,loaded:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return n.d(r,{a:r}),r},n.d=(e,r)=>{for(var t in r)n.o(r,t)&&!n.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},n.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.nc=void 0,(()=>{"use strict";var e=n(379),r=n.n(e),t=n(795),a=n.n(t),o=n(569),i=n.n(o),s=n(565),l=n.n(s),c=n(216),d=n.n(c),p=n(589),u=n.n(p),A=n(780),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),r()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const h=(e=10)=>{const r=e;let n=[],t=[],a=[2,2,2,3,3,4];const o=[],i=()=>new Array(r*r);let s=i();const l=()=>s,c=(e,n)=>{const t=((e,n)=>r*n+e)(e,n);return t},d=e=>{const r=JSON.stringify(e);return t.some((e=>JSON.stringify(e)===r))},p=e=>{const r=JSON.stringify(e);return n.some((e=>JSON.stringify(e)===r))},u=(e,r)=>{if(null==r.x||null==r.y)throw new Error("Invalid position argument");const n=r.x,t=r.y,i=c(n,t);if(!A(e,r))throw new Error("Position already has ship");let d=((e=2)=>{let r=0,n=e;const t=()=>r>=n;return{getTimesHit:()=>r,getLength:()=>n,hit:()=>{t()||r++},isSunk:t}})(e);o.push(d);let p=l();for(let e=0;e<d.getLength();e++)p[i+e]=d;(e=>{s=e})(p);const u=a.indexOf(e);if(-1===u)throw new Error("No ships remaining of given ship size");return a.splice(u,1),d},A=(e,n)=>{for(let t=0;t<e;t++){let e=n.x+t,a=n.y;if(e>r-1||a>r-1)return!1;let o=c(e,a);if(l()[o])return!1}return!0},m=e=>{let n=Math.floor(Math.random()*r),t=Math.floor(Math.random()*r);for(;!A(e,{x:n,y:t});)n=Math.floor(Math.random()*r),t=Math.floor(Math.random()*r);return{x:n,y:t}},h=e=>!(e[0]<0||e[1]<0||e[0]>r-1||e[1]>r-1);return{getBoard:l,getPos:c,placeShip:u,receiveAttack:(e,r)=>{const a=[e,r];if(!h(a))throw new Error(`Invalid position: ${a}`);if(d(a)||p(a))return!1;const o=s[c(e,r)];return o&&o.hit?(t.push(a),o.hit(),!0):(n.push(a),!1)},getMissedShots:()=>n,isAllSunk:()=>{if((()=>{for(let e of s)if(e)return!1;return!0})())return!1;for(const e of s)if(e&&e.isSunk&&!e.isSunk())return!1;return!0},getHits:()=>t,generateBoard:()=>{const e=Array.from(a),r=[];for(;e.length>0;){const n=e.shift(),t=m(n);u(n,t),r.push({x:t.x,y:t.y})}return r},getCoordsFromIndex:e=>[e%r,Math.floor(e/r)],getShips:()=>o,hitExists:d,missExists:p,getLength:()=>r,getShipsToPlace:()=>a,resetBoard:()=>{s=i(),n=[],t=[],a=[2,2,2,3,3,4]},isValidPosition:h}},{isArray:f}=Array;class g{constructor(e){this.value=e}}function b(e,r,n){if(!f(n))throw new TypeError("reduce: list must be array or iterable");let t=0;const a=n.length;for(;t<a;){if((r=e(r,n[t],t,n))instanceof g)return r.value;t++}return r}function C(e,r){return function(){return r.call(this,e.apply(this,arguments))}}!function e(r,n=[]){return(...t)=>{return(a=[...n,...t]).length>=r.length?r(...a):e(r,a);var a}}(b);const y=()=>{let e=h(),r=!1;const n=e=>r=e;return{gameBoard:e,getIsCurrentPlayer:()=>r,setIsCurrentPlayer:n,toggleIsCurrentPlayer:()=>n(!r)}},B=(e={})=>{let r=[],n=[];const t=e=>{const n=JSON.stringify(e);return r.some((e=>JSON.stringify(e)===n))},a=()=>{if(n.length>0){const e=n.shift();let t=e[0],a=e[1];return r.push([t,a]),{x:t,y:a}}let o=Math.floor(Math.random()*e.gameBoard.getLength()),i=Math.floor(Math.random()*e.gameBoard.getLength());return t([o,i])?a():(r.push([o,i]),{x:o,y:i})};return{...e,getNextAttack:a,getPerformedAttacks:()=>r,isAI:!0,getQueuedAttacks:()=>n,queueAttack:(e,r)=>{t([e,r])||(e=>{const r=JSON.stringify(e);return n.some((e=>JSON.stringify(e)===r))})([e,r])||n.push([e,r])},reset:()=>{n=[],r=[]}}};var v=n(582),I={};I.styleTagTransform=u(),I.setAttributes=l(),I.insert=i().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=d(),r()(v.Z,I),v.Z&&v.Z.locals&&v.Z.locals;var x=n(798),w=n.n(x);class k{constructor(e,r=!1,n){this.player=e,this.gameboard=e.gameBoard,this.hideShips=r,this.gameboardItemClickCallback=n,w().subscribe("gameBoardChanged",((e,r)=>{r===this.gameboard&&this.updateGameboardItems()}))}render(){return this.gameboardDiv=document.createElement("div"),this.gameboardDiv.classList.add("gameboard-container"),this.createGameBoard(),this.updateGameboardItems(),this.gameboardDiv}updateGameboardItems(){for(let e of this.gameboardDiv.childNodes){const r=e.position,n=this.gameboard.getBoard();n[r]?(this.hideShips||e.classList.add("ship"),n[r].isSunk()?(e.classList.remove("ship"),e.classList.remove("hit"),e.classList.add("sunk")):this.gameboard.hitExists(this.gameboard.getCoordsFromIndex(r))&&(e.classList.remove("ship"),e.classList.add("hit"))):this.gameboard.missExists(this.gameboard.getCoordsFromIndex(r))&&e.classList.add("miss")}}createGameBoard(){for(let e=0;e<this.gameboard.getBoard().length;e++){const r=document.createElement("div");r.classList.add("gameboard-item"),r.textContent=e,r.position=e,r.addEventListener("click",(e=>{this.gameboardItemClickCallback&&this.gameboardItemClickCallback(e)})),this.player.isAI||(r.addEventListener("dragover",(e=>{e.preventDefault()})),r.addEventListener("dragenter",(e=>{e.preventDefault(),r.style.border="1px solid #f00"})),r.addEventListener("dragleave",(e=>{e.preventDefault(),r.style.border=""})),r.addEventListener("drop",(e=>{e.preventDefault(),r.style.border="";const n=e.target.position,t=Number(e.dataTransfer.getData("text/plain"));if(t){const r=this.gameboard.getCoordsFromIndex(n);try{this.gameboard.placeShip(t,{x:r[0],y:r[1]}),w().publish("gameBoardChanged",this.gameboard),w().publish("shipsPlacedChanged")}catch(e){return}}}))),this.gameboardDiv.appendChild(r)}}resetGameBoard(){this.gameboardDiv.innerHTML="",this.createGameBoard(),this.updateGameboardItems()}}var O=n(232),S={};S.styleTagTransform=u(),S.setAttributes=l(),S.insert=i().bind(null,"head"),S.domAPI=a(),S.insertStyleElement=d(),r()(O.Z,S),O.Z&&O.Z.locals&&O.Z.locals;class E{constructor(e,r){this.gameOverText=e,this.newGameCallback=r}render(){this.gameOverContainer=document.createElement("div"),this.gameOverContainer.classList.add("game-over-container","hidden");const e=document.createElement("div");e.classList.add("game-over"),this.gameOverContainer.appendChild(e);const r=document.createElement("h2");r.classList.add("game-over-header"),r.textContent="Game Over!",e.appendChild(r),this.gameOverSpan=document.createElement("span"),this.gameOverSpan.classList.add("game-over-text"),this.gameOverSpan.textContent=this.gameOverText||"",e.appendChild(this.gameOverSpan);const n=document.createElement("button");return n.classList.add("new-game-button"),n.textContent="New Game",this.newGameCallback&&n.addEventListener("click",(e=>{this.newGameCallback(e)})),e.appendChild(n),this.gameOverContainer}setGameOverText(e){this.gameOverSpan.textContent=e}toggle(){this.gameOverContainer.classList.contains("hidden")?this.gameOverContainer.classList.remove("hidden"):this.gameOverContainer.classList.add("hidden")}}var P=n(548),L={};L.styleTagTransform=u(),L.setAttributes=l(),L.insert=i().bind(null,"head"),L.domAPI=a(),L.insertStyleElement=d(),r()(P.Z,L),P.Z&&P.Z.locals&&P.Z.locals;class j{constructor(e){this.gameboard=e,w().subscribe("shipsPlacedChanged",(()=>this.updateShipsToPlace()))}render(){return this.shipPlacementContainer=document.createElement("div"),this.shipPlacementContainer.classList.add("ship-placement-container"),this.updateShipsToPlace(),this.shipPlacementContainer}updateShipsToPlace(){if(0===this.gameboard.getShipsToPlace().length)return void this.shipPlacementContainer.classList.add("hidden");this.shipPlacementContainer.classList.remove("hidden"),this.shipPlacementContainer.innerHTML="";const e=document.createElement("h2");e.classList.add("ship-placement-header"),e.textContent="Ship Placement",this.shipPlacementContainer.appendChild(e);for(const e of this.gameboard.getShipsToPlace()){const r=document.createElement("div");r.classList.add("ship-to-place"),r.draggable=!0,r.addEventListener("dragstart",(r=>{r.dataTransfer.setData("text/plain",e)}));for(let n=0;n<e;n++){const e=document.createElement("div");e.classList.add("ship-to-place-cell"),r.appendChild(e)}this.shipPlacementContainer.appendChild(r)}}}class T{constructor(e){this.generatePlayerBoard=e,this.player1=y(),this.generatePlayerBoard&&this.player1.gameBoard.generateBoard(),this.player2=(()=>{const e=y();return function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return function(e,r){switch(e){case 0:return function(){return r.apply(this,arguments)};case 1:return function(e){return r.apply(this,arguments)};case 2:return function(e,n){return r.apply(this,arguments)};case 3:return function(e,n,t){return r.apply(this,arguments)};case 4:return function(e,n,t,a){return r.apply(this,arguments)};case 5:return function(e,n,t,a,o){return r.apply(this,arguments)};case 6:return function(e,n,t,a,o,i){return r.apply(this,arguments)};case 7:return function(e,n,t,a,o,i,s){return r.apply(this,arguments)};case 8:return function(e,n,t,a,o,i,s,l){return r.apply(this,arguments)};case 9:return function(e,n,t,a,o,i,s,l,c){return r.apply(this,arguments)};case 10:return function(e,n,t,a,o,i,s,l,c,d){return r.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}(arguments[0].length,b(C,arguments[0],Array.prototype.slice.call(arguments,1,1/0)))}(B)(e)})(),this.player2.gameBoard.generateBoard(),this.player1.setIsCurrentPlayer(!0),this.handleEnemyGameboardInput=e=>{if(this.player2.gameBoard.isAllSunk()||this.player1.gameBoard.isAllSunk())return;if(this.player1.gameBoard.getShipsToPlace().length>0)return;const r=this.player2.gameBoard.getCoordsFromIndex(e.currentTarget.position);if(this.player2.gameBoard.receiveAttack(r[0],r[1]),this.player2gameBoard.updateGameboardItems(),this.player2.gameBoard.isAllSunk())return console.log("Game Over, player 1 wins"),this.gameOverComponent.setGameOverText("Player 1 wins!"),void this.gameOverComponent.toggle();const n=this.player2.getNextAttack();return!0===this.player1.gameBoard.receiveAttack(n.x,n.y)&&(this.player1.gameBoard.isValidPosition([n.x-1,n.y])&&this.player2.queueAttack(n.x-1,n.y),this.player1.gameBoard.isValidPosition([n.x+1,n.y])&&this.player2.queueAttack(n.x+1,n.y)),this.player1gameBoard.updateGameboardItems(),this.player1.gameBoard.isAllSunk()?(console.log("Game Over, player 2 wins"),this.gameOverComponent.setGameOverText("Player 2 wins!"),void this.gameOverComponent.toggle()):void 0},this.player1gameBoard=new k(this.player1,!1),this.player1ShipPlacement=new j(this.player1.gameBoard),this.player2gameBoard=new k(this.player2,!0,this.handleEnemyGameboardInput),this.gameOverComponent=new E("",(()=>{this.resetGame(),this.gameOverComponent.toggle(),this.player1ShipPlacement.updateShipsToPlace()}))}resetGame(){this.player1.gameBoard.resetBoard(),this.player2.gameBoard.resetBoard(),this.player2.reset(),this.generatePlayerBoard&&this.player1.gameBoard.generateBoard(),this.player2.gameBoard.generateBoard(),this.player1.setIsCurrentPlayer(!0),this.player1gameBoard.resetGameBoard(),this.player2gameBoard.resetGameBoard()}}(()=>{console.log("battleship app loaded");const e=document.querySelector(".wrapper"),r=document.createElement("h1");r.classList.add("main-header"),r.textContent="Battleship",e.appendChild(r);const n=new T,t=document.createElement("h2");t.classList.add("player-header"),t.textContent="Player 1",e.appendChild(t);const a=document.createElement("h2");a.classList.add("player-header"),a.textContent="Player 2 (AI)",e.appendChild(a),e.appendChild(n.player1gameBoard.render()),e.appendChild(n.player2gameBoard.render()),e.appendChild(n.gameOverComponent.render()),e.appendChild(n.player1ShipPlacement.render())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,