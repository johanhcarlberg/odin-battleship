(()=>{"use strict";var r={232:(r,e,n)=>{n.d(e,{Z:()=>i});var t=n(537),a=n.n(t),o=n(645),s=n.n(o)()(a());s.push([r.id,".game-over-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.game-over {\r\n    width: 40%;\r\n    height: 30%;\r\n    display: grid;\r\n    background-color: #fafafa;\r\n    border-radius: 10px;\r\n}\r\n\r\n.game-over-header {\r\n    justify-self: center;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.game-over-text {\r\n    font-size: 18px;\r\n    justify-self: center;\r\n}\r\n\r\n.new-game-button {\r\n    justify-self: center;\r\n    align-self: end;\r\n    margin-bottom: 1rem;\r\n    padding: 10px 30px;\r\n    outline: none;\r\n    background-color: #1b98ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    border: none;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n}\r\n\r\n.new-game-button:hover {\r\n    background-color: #55b1fc;\r\n}","",{version:3,sources:["webpack://./src/Game/GameOverComponent.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,oCAAoC;IACpC,aAAa;IACb,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,UAAU;IACV,WAAW;IACX,aAAa;IACb,yBAAyB;IACzB,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:[".game-over-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.2);\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.game-over {\r\n    width: 40%;\r\n    height: 30%;\r\n    display: grid;\r\n    background-color: #fafafa;\r\n    border-radius: 10px;\r\n}\r\n\r\n.game-over-header {\r\n    justify-self: center;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.game-over-text {\r\n    font-size: 18px;\r\n    justify-self: center;\r\n}\r\n\r\n.new-game-button {\r\n    justify-self: center;\r\n    align-self: end;\r\n    margin-bottom: 1rem;\r\n    padding: 10px 30px;\r\n    outline: none;\r\n    background-color: #1b98ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    border: none;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n}\r\n\r\n.new-game-button:hover {\r\n    background-color: #55b1fc;\r\n}"],sourceRoot:""}]);const i=s},780:(r,e,n)=>{n.d(e,{Z:()=>i});var t=n(537),a=n.n(t),o=n(645),s=n.n(o)()(a());s.push([r.id,"/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n.wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}","",{version:3,sources:["webpack://./src/app.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;AACzB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n.wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    justify-items: center;\r\n}"],sourceRoot:""}]);const i=s},582:(r,e,n)=>{n.d(e,{Z:()=>i});var t=n(537),a=n.n(t),o=n(645),s=n.n(o)()(a());s.push([r.id,".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(255, 91, 91);\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(99, 0, 0);\r\n}","",{version:3,sources:["webpack://./src/gameboard/GameboardComponent.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,uCAAuC;IACvC,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,+BAA+B;AACnC",sourcesContent:[".gameboard-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(10, 50px);\r\n    grid-template-rows: repeat(10, 50px);\r\n}\r\n\r\n.gameboard-item {\r\n    display: grid;\r\n    align-items: center;\r\n    justify-items: center;\r\n    border: 1px solid #777;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.ship {\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n.miss {\r\n    background-color: #aaa;\r\n}\r\n\r\n.hit {\r\n    background-color: rgb(255, 91, 91);\r\n}\r\n\r\n.sunk {\r\n    background-color: rgb(99, 0, 0);\r\n}"],sourceRoot:""}]);const i=s},548:(r,e,n)=>{n.d(e,{Z:()=>i});var t=n(537),a=n.n(t),o=n(645),s=n.n(o)()(a());s.push([r.id,".ship-placement-container {\r\n    border: 1px solid #333;\r\n    display: grid;\r\n    width: 90%;\r\n    justify-self: center;\r\n    margin-top: 2rem;\r\n}\r\n\r\n.ship-to-place {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-columns: auto;\r\n    justify-items: center;\r\n    justify-content: start;\r\n    margin: 5px 5px;\r\n}\r\n\r\n.ship-to-place-cell {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/gameboard/ShipPlacementComponent.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,aAAa;IACb,UAAU;IACV,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,qBAAqB;IACrB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,WAAW;AACf",sourcesContent:[".ship-placement-container {\r\n    border: 1px solid #333;\r\n    display: grid;\r\n    width: 90%;\r\n    justify-self: center;\r\n    margin-top: 2rem;\r\n}\r\n\r\n.ship-to-place {\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-columns: auto;\r\n    justify-items: center;\r\n    justify-content: start;\r\n    margin: 5px 5px;\r\n}\r\n\r\n.ship-to-place-cell {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #333;\r\n    color: #fff;\r\n}\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const i=s},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,a,o){"string"==typeof r&&(r=[[null,r,void 0]]);var s={};if(t)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<r.length;c++){var d=[].concat(r[c]);t&&s[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},537:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var o={},s=[],i=0;i<r.length;i++){var l=r[i],c=t.base?l[0]+t.base:l[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var p=n(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=a(u,t);t.byIndex=i,e.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function a(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,a){var o=t(r=r||[],a=a||{});return function(r){r=r||[];for(var s=0;s<o.length;s++){var i=n(o[s]);e[i].references--}for(var l=t(r,a),c=0;c<o.length;c++){var d=n(o[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=l}}},569:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,a&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function n(t){var a=e[t];if(void 0!==a)return a.exports;var o=e[t]={id:t,exports:{}};return r[t](o,o.exports,n),o.exports}n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),n.nc=void 0,(()=>{var r=n(379),e=n.n(r),t=n(795),a=n.n(t),o=n(569),s=n.n(o),i=n(565),l=n.n(i),c=n(216),d=n.n(c),A=n(589),p=n.n(A),u=n(780),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const h=(r=10)=>{const e=r,n=[],t=[],a=[2,2,2,3,3,4],o=[];let s=new Array(e*e);const i=()=>s,l=(r,n)=>{const t=((r,n)=>e*n+r)(r,n);return t},c=r=>{const e=JSON.stringify(r);return t.some((r=>JSON.stringify(r)===e))},d=r=>{const e=JSON.stringify(r);return n.some((r=>JSON.stringify(r)===e))},A=(r,e)=>{if(null==e.x||null==e.y)throw new Error("Invalid position argument");if(!a.includes(r))throw new Error("Ship size invalid or no more ships of size to place");const n=e.x,t=e.y,c=l(n,t);if(!p(r,e))throw new Error("Position already has ship");let d=((r=2)=>{let e=0,n=r;const t=()=>e>=n;return{getTimesHit:()=>e,getLength:()=>n,hit:()=>{t()||e++},isSunk:t}})(r);o.push(d);let A=i();for(let r=0;r<d.getLength();r++)A[c+r]=d;(r=>{s=r})(A);const u=a.indexOf(r);if(-1===u)throw new Error("No ships remaining of given ship size");return a.splice(u,1),d},p=(r,n)=>{for(let t=0;t<r;t++){let r=n.x+t,a=n.y+t;if(r>e-1||a>e-1)return!1;let o=l(n.x+t,n.y);if(i()[o])return!1}return!0},u=r=>{let n=Math.floor(Math.random()*e),t=Math.floor(Math.random()*e);for(;!p(r,{x:n,y:t});)n=Math.floor(Math.random()*e),t=Math.floor(Math.random()*e);return{x:n,y:t}};return{getBoard:i,getPos:l,placeShip:A,receiveAttack:(r,a)=>{const o=[r,a];if(!(r=>!(r[0]<0||r[1]<0||r[0]>e-1||r[1]>e-1))(o))throw new Error(`Invalid position: ${o}`);if(c(o)||d(o))return;const i=s[l(r,a)];i&&i.hit?(t.push(o),i.hit()):n.push(o)},getMissedShots:()=>n,isAllSunk:()=>{for(const r of s)if(r&&r.isSunk&&!r.isSunk())return!1;return!0},getHits:()=>t,generateBoard:()=>{const r=Array.from(a),e=[];for(;r.length>0;){const n=r.shift(),t=u(n);A(n,t),e.push({x:t.x,y:t.y})}return e},getCoordsFromIndex:r=>[r%e,Math.floor(r/e)],getShips:()=>o,hitExists:c,missExists:d,getLength:()=>e,getShipsToPlace:()=>a}},{isArray:g}=Array;class f{constructor(r){this.value=r}}function C(r,e,n){if(!g(n))throw new TypeError("reduce: list must be array or iterable");let t=0;const a=n.length;for(;t<a;){if((e=r(e,n[t],t,n))instanceof f)return e.value;t++}return e}function b(r,e){return function(){return e.call(this,r.apply(this,arguments))}}!function r(e,n=[]){return(...t)=>{return(a=[...n,...t]).length>=e.length?e(...a):r(e,a);var a}}(C);const y=()=>{let r=h(),e=!1;const n=r=>e=r;return{gameBoard:r,getIsCurrentPlayer:()=>e,setIsCurrentPlayer:n,toggleIsCurrentPlayer:()=>n(!e)}},v=(r={})=>{const e=[],n=()=>{let t=Math.floor(Math.random()*r.gameBoard.getLength()),a=Math.floor(Math.random()*r.gameBoard.getLength());return(r=>{const n=JSON.stringify(r);return e.some((r=>JSON.stringify(r)===n))})([t,a])?n():(e.push([t,a]),{x:t,y:a})};return{...r,getNextAttack:n,getPerformedAttacks:()=>e}};var B=n(582),I={};I.styleTagTransform=p(),I.setAttributes=l(),I.insert=s().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=d(),e()(B.Z,I),B.Z&&B.Z.locals&&B.Z.locals;class x{constructor(r,e=!1,n){this.player=r,this.gameboard=r.gameBoard,this.hideShips=e,this.gameboardItemClickCallback=n}render(){this.gameboardDiv=document.createElement("div"),this.gameboardDiv.classList.add("gameboard-container");for(let r=0;r<this.gameboard.getBoard().length;r++){const e=document.createElement("div");e.classList.add("gameboard-item"),e.textContent=r,e.position=r,e.addEventListener("click",(r=>{this.gameboardItemClickCallback&&this.gameboardItemClickCallback(r)})),this.gameboardDiv.appendChild(e)}return this.updateGameboardItems(),this.gameboardDiv}updateGameboardItems(){for(let r of this.gameboardDiv.childNodes){const e=r.position,n=this.gameboard.getBoard();n[e]?(this.hideShips||r.classList.add("ship"),n[e].isSunk()?(r.classList.remove("ship"),r.classList.remove("hit"),r.classList.add("sunk")):this.gameboard.hitExists(this.gameboard.getCoordsFromIndex(e))&&(r.classList.remove("ship"),r.classList.add("hit"))):this.gameboard.missExists(this.gameboard.getCoordsFromIndex(e))&&r.classList.add("miss")}}}var k=n(232),w={};w.styleTagTransform=p(),w.setAttributes=l(),w.insert=s().bind(null,"head"),w.domAPI=a(),w.insertStyleElement=d(),e()(k.Z,w),k.Z&&k.Z.locals&&k.Z.locals;class E{constructor(r,e){this.gameOverText=r,this.newGameCallback=e}render(){this.gameOverContainer=document.createElement("div"),this.gameOverContainer.classList.add("game-over-container","hidden");const r=document.createElement("div");r.classList.add("game-over"),this.gameOverContainer.appendChild(r);const e=document.createElement("h2");e.classList.add("game-over-header"),e.textContent="Game Over!",r.appendChild(e),this.gameOverSpan=document.createElement("span"),this.gameOverSpan.classList.add("game-over-text"),this.gameOverSpan.textContent=this.gameOverText||"",r.appendChild(this.gameOverSpan);const n=document.createElement("button");return n.classList.add("new-game-button"),n.textContent="New Game",this.newGameCallback&&n.addEventListener("click",(r=>{this.newGameCallback(r)})),r.appendChild(n),this.gameOverContainer}setGameOverText(r){this.gameOverSpan.textContent=r}toggle(){this.gameOverContainer.classList.contains("hidden")?this.gameOverContainer.classList.remove("hidden"):this.gameOverContainer.classList.add("hidden")}}var S=n(548),O={};O.styleTagTransform=p(),O.setAttributes=l(),O.insert=s().bind(null,"head"),O.domAPI=a(),O.insertStyleElement=d(),e()(S.Z,O),S.Z&&S.Z.locals&&S.Z.locals;class L{constructor(r){this.gameboard=r}render(){this.shipPlacementContainer=document.createElement("div"),this.shipPlacementContainer.classList.add("ship-placement-container");for(const r of this.gameboard.getShipsToPlace()){const e=document.createElement("div");e.classList.add("ship-to-place"),e.draggable=!0;for(let n=0;n<r;n++){const r=document.createElement("div");r.classList.add("ship-to-place-cell"),e.appendChild(r)}this.shipPlacementContainer.appendChild(e)}return this.shipPlacementContainer}}class j{constructor(r){this.player1=y(),r&&this.player1.gameBoard.generateBoard(),this.player2=(()=>{const r=y();return function(){if(0===arguments.length)throw new Error("pipe requires at least one argument");return function(r,e){switch(r){case 0:return function(){return e.apply(this,arguments)};case 1:return function(r){return e.apply(this,arguments)};case 2:return function(r,n){return e.apply(this,arguments)};case 3:return function(r,n,t){return e.apply(this,arguments)};case 4:return function(r,n,t,a){return e.apply(this,arguments)};case 5:return function(r,n,t,a,o){return e.apply(this,arguments)};case 6:return function(r,n,t,a,o,s){return e.apply(this,arguments)};case 7:return function(r,n,t,a,o,s,i){return e.apply(this,arguments)};case 8:return function(r,n,t,a,o,s,i,l){return e.apply(this,arguments)};case 9:return function(r,n,t,a,o,s,i,l,c){return e.apply(this,arguments)};case 10:return function(r,n,t,a,o,s,i,l,c,d){return e.apply(this,arguments)};default:throw new Error("First argument to _arity must be a non-negative integer no greater than ten")}}(arguments[0].length,C(b,arguments[0],Array.prototype.slice.call(arguments,1,1/0)))}(v)(r)})(),this.player2.gameBoard.generateBoard(),this.player1.setIsCurrentPlayer(!0),this.handleEnemyGameboardInput=r=>{if(this.player2.gameBoard.isAllSunk()||this.player1.gameBoard.isAllSunk())return;const e=this.player2.gameBoard.getCoordsFromIndex(r.currentTarget.position);if(this.player2.gameBoard.receiveAttack(e[0],e[1]),this.player2gameBoard.updateGameboardItems(),this.player2.gameBoard.isAllSunk())return console.log("Game Over, player 1 wins"),this.gameOverComponent.setGameOverText("Player 1 wins!"),void this.gameOverComponent.toggle();const n=this.player2.getNextAttack();return console.log(n),this.player1.gameBoard.receiveAttack(n.x,n.y),this.player1gameBoard.updateGameboardItems(),this.player1.gameBoard.isAllSunk()?(console.log("Game Over, player 2 wins"),this.gameOverComponent.setGameOverText("Player 2 wins!"),void this.gameOverComponent.toggle()):void 0},this.player1gameBoard=new x(this.player1,!1),this.player1ShipPlacement=new L(this.player1.gameBoard),this.player2gameBoard=new x(this.player2,!0,this.handleEnemyGameboardInput),this.gameOverComponent=new E("",(()=>{this.gameOverComponent.toggle()}))}}(()=>{console.log("battleship app loaded");const r=document.querySelector(".wrapper"),e=new j;r.appendChild(e.player1gameBoard.render()),r.appendChild(e.player2gameBoard.render()),r.appendChild(e.gameOverComponent.render()),r.appendChild(e.player1ShipPlacement.render())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,